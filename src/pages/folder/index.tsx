import { EditFileModal } from "</components/Ui/EditFileModal>";
import { EditFolderModal } from "</components/Ui/EditFolderModal>";
import { selectFolderState } from "</slices/folderSlice>";
import Head from "next/head";
import { useRouter } from "next/router";
import { useState } from "react";
import { AiOutlineArrowUp, AiOutlineInfoCircle } from "react-icons/ai";
import { FaFile, FaFolder } from "react-icons/fa";
import { IoIosArrowForward, IoMdArrowDropdown } from "react-icons/io";
import { MdOutlineViewList } from "react-icons/md";
import { SlOptionsVertical } from "react-icons/sl";
import { useSelector } from "react-redux";
import styled from "styled-components";
const DataGrid = styled.div`
  display: flex;
  align-items: center;
  margin-top: 30px;
  margin-bottom: 30px;
`;

const DataFile = styled.div`
  display: flex;
  align-items: center;
  justify-content: center;
  gap: 30px;
  margin: 10px;
  min-width: 200px;
  border-radius: 5px;
  border: 0px solid;
  box-shadow: 0px 0px 4px 0px rgba(0, 0, 0, 0.75);
  cursor: pointer;
  svg {
    font-size: 20px;
    color: #1f1f1f;
  }
  p {
    font-size: 14px;
    overflow: hidden;
  }
`;

const DataListRow = styled.div`
  display: flex;
  align-items: center;
  justify-content: space-between;
  padding: 10px;
  p {
    display: flex;
    align-items: center;
    b {
      font-size: 16px;
      color: #444746;
      display: flex;
      align-items: center;
    }
    svg {
      font-size: 16px;
      margin: 10px;
      color: #1f1f1f;
    }
  }
`;
const DataHeader = styled.div`
  display: flex;
  align-items: center;
  justify-content: space-between;
  border-bottom: 1px solid lightgray;
  .headerLeft {
    display: flex;
    align-items: center;
    font-size: 24px;
    border-radius: 20px;
    &:hover {
      background: whitesmoke;
      cursor: pointer;
    }
  }
  .headerRight svg {
    margin: 0px 10px;
    font-size: 24px;
  }
`;
export default function Folder() {
  const [open, setOpen] = useState<boolean>(false);
  const [editFolderId, setEditFolderId] = useState<string>("");
  const [folderName, setFolderName] = useState<string>("");
  const [openFile, setOpenFile] = useState<boolean>(false);
  const [editFileId, setEditFileId] = useState<string>("");
  const handleOpen = () => {
    setOpen(true);
  };
  const handleClose = () => {
    setOpen(false);
  };
  const handleFileOpen = () => {
    setOpenFile(true);
  };
  const handleFileClose = () => {
    setOpenFile(false);
  };
  const router = useRouter();
  const allFolders = useSelector(selectFolderState);
  const files = allFolders?.files?.filter(
    (file: any) => file?.parentId === "folder"
  );
  const folders = allFolders?.folders?.filter(
    (folder: any) => folder?.parentId === "folder"
  );
  console.log(folders);
  return (
    <>
      <Head>
        <title>My Folder</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <div>
        <DataHeader>
          <div className="headerLeft">
            <div className="headerLeft" onClick={() => router.push("/folder")}>
              <p>My folder</p>
              <IoIosArrowForward />
            </div>
            <div className="headerLeft" onClick={() => router.push("/folder")}>
              <p>folder</p>
              <IoMdArrowDropdown />
            </div>
          </div>
          <div className="headerRight">
            <MdOutlineViewList />
            <AiOutlineInfoCircle />
          </div>
        </DataHeader>
        <div>
          <DataListRow>
            <p>
              <b>Folders</b>
            </p>
            <p>
              <b></b>
            </p>
            <p>
              <b></b>
            </p>
            <p>
              <b>
                Name <AiOutlineArrowUp />
              </b>
            </p>
          </DataListRow>
          <DataGrid>
            {open && (
              <EditFolderModal
                open={open}
                folderId={editFolderId}
                folderName={folderName}
                handleOpen={handleOpen}
                handleClose={handleClose}
              />
            )}
            {folders?.map((folder: any) => (
              <DataFile key={folder?.id}>
                <FaFolder />
                <p onClick={() => router.push(folder?.path)}>{folder?.name}</p>
                <span
                  onClick={() => {
                    handleOpen(), setEditFolderId(folder?.id), setFolderName(folder?.name)
                  }}
                >
                  <SlOptionsVertical />
                </span>
              </DataFile>
            ))}
          </DataGrid>
        </div>
        <div>
          <DataListRow>
            <p>
              <b>Files</b>
            </p>
          </DataListRow>
          <DataGrid>
            {openFile && (
              <EditFileModal
                openFile={openFile}
                fileId={editFileId}
                handleFileOpen={handleFileOpen}
                handleFileClose={handleFileClose}
              />
            )}
            {files?.map((file: any) => (
              <DataFile key={file.id}>
                <FaFile />
                <p>{file.name}</p>
                <span
                  onClick={() => {
                    handleFileOpen(), setEditFileId(file?.id);
                  }}
                >
                  <SlOptionsVertical />
                </span>
              </DataFile>
            ))}
          </DataGrid>
        </div>
      </div>
    </>
  );
}
